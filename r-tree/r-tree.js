var RTreeRectangle = (function () {
    function RTreeRectangle(x, y, width, height, data) {
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.data = data;
        this.children = [];
    }
    RTreeRectangle.generateEmptyNode = function () {
        return new RTreeRectangle(Infinity, Infinity, 0, 0, null);
    };
    RTreeRectangle.prototype.overlaps = function (anotherRect) {
        return this.x < anotherRect.x + anotherRect.width && this.x + this.width > anotherRect.x && this.y + this.height > anotherRect.y && anotherRect.y + anotherRect.height > this.y;
    };
    RTreeRectangle.prototype.contains = function (anotherRect) {
        return this.x <= anotherRect.x && this.x + this.width >= anotherRect.x + anotherRect.width && this.y <= anotherRect.y && this.y + this.height >= anotherRect.y + anotherRect.height;
    };
    RTreeRectangle.prototype.growRectangleToFit = function (anotherRect) {
        if (this.x === Infinity) {
            this.height = anotherRect.height;
            this.width = anotherRect.width;
            this.x = anotherRect.x;
            this.y = anotherRect.y;
        }
        else {
            this.height = Math.max(this.y + this.height, anotherRect.y + anotherRect.height) - Math.min(this.y, anotherRect.y);
            this.width = Math.max(this.x + this.width, anotherRect.x + anotherRect.width) - Math.min(this.x, anotherRect.x);
            this.x = Math.min(this.x, anotherRect.x);
            this.y = Math.min(this.y, anotherRect.y);
        }
    };
    RTreeRectangle.prototype.areaIfGrownBy = function (anotherRect) {
        if (this.x === Infinity) {
            return anotherRect.height * anotherRect.width;
        }
        else {
            return (Math.max(this.y + this.height, anotherRect.y + anotherRect.height) - Math.min(this.y, anotherRect.y)) * (Math.max(this.x + this.width, anotherRect.x + anotherRect.width) - Math.min(this.x, anotherRect.x)) - this.getArea();
        }
    };
    RTreeRectangle.prototype.getArea = function () {
        return this.height * this.width;
    };
    RTreeRectangle.prototype.splitIntoSiblings = function () {
        var pivot = Math.floor(this.children.length / 2);
        var sibling1 = RTreeRectangle.generateEmptyNode();
        var sibling2 = RTreeRectangle.generateEmptyNode();
        var maxCoordinate = -Infinity;
        var minCoordinate = Infinity;
        var coordX, coordY;
        _.each(this.children, function (rect) {
            coordX = Math.ceil(rect.x + rect.width * 0.5);
            coordY = Math.ceil(rect.y + rect.height * 0.5);
            maxCoordinate = Math.max(maxCoordinate, Math.max(coordX, coordY));
            minCoordinate = Math.min(minCoordinate, Math.min(coordX, coordY));
        });
        var sorted = _.sortBy(this.children, function (rect) {
            return HilbertCurves.toHilbertCoordinates(maxCoordinate - minCoordinate, Math.ceil(rect.x + rect.width * 0.5) - minCoordinate, Math.ceil(rect.y + rect.height * 0.5) - minCoordinate);
        });
        _.each(sorted, function (rect, i) {
            if (i <= pivot) {
                sibling1.insertChildRectangle(rect);
            }
            else {
                sibling2.insertChildRectangle(rect);
            }
        });
        this.children.length = 0;
        sorted.length = 0;
        return [sibling1, sibling2];
    };
    RTreeRectangle.prototype.numberOfChildren = function () {
        return this.children.length;
    };
    RTreeRectangle.prototype.isLeafNode = function () {
        return this.children.length === 0;
    };
    RTreeRectangle.prototype.hasLeafNodes = function () {
        return this.isLeafNode() || this.children[0].isLeafNode();
    };
    RTreeRectangle.prototype.insertChildRectangle = function (insertRect) {
        insertRect.parent = this;
        this.children.push(insertRect);
        this.growRectangleToFit(insertRect);
    };
    RTreeRectangle.prototype.removeChildRectangle = function (removeRect) {
        this.children.splice(_.indexOf(this.children, removeRect), 1);
    };
    RTreeRectangle.prototype.getSubtreeData = function () {
        if (this.children.length === 0) {
            return [this.data];
        }
        return _.chain(this.children)
            .map(_.method("getSubtreeData"))
            .thru(fastFlattenArray)
            .value();
    };
    return RTreeRectangle;
}());
var RTree = (function () {
    function RTree(maxNodes) {
        this.maxNodes = maxNodes;
        this.root = RTreeRectangle.generateEmptyNode();
    }
    RTree.prototype._recursiveSeach = function (searchRect, node) {
        var _this = this;
        if (searchRect.contains(node) || node.isLeafNode()) {
            return node.getSubtreeData();
        }
        else {
            return _.chain(node.children)
                .filter(_.method("overlaps", searchRect))
                .map(function (iterateNode) {
                return _this._recursiveSeach(searchRect, iterateNode);
            })
                .flatten()
                .value();
        }
    };
    RTree.prototype.search = function (searchBoundary) {
        var searchRect = new RTreeRectangle(searchBoundary.x, searchBoundary.y, searchBoundary.width, searchBoundary.height, null);
        return this._recursiveSeach(searchRect, this.root);
    };
    RTree.prototype.insert = function (dataPoint) {
        var insertRect = new RTreeRectangle(dataPoint.x, dataPoint.y, dataPoint.width, dataPoint.height, dataPoint.data);
        var currentNode = this.root;
        while (!currentNode.hasLeafNodes()) {
            currentNode.growRectangleToFit(insertRect);
            currentNode = _.minBy(currentNode.children, _.method("areaIfGrownBy", insertRect));
        }
        currentNode.insertChildRectangle(insertRect);
        this.balanceTreePath(insertRect);
    };
    RTree.prototype._recursiveTreeLayer = function (listOfRectangles, level) {
        if (level === void 0) { level = 1; }
        var numberOfParents = Math.ceil(listOfRectangles.length / this.maxNodes);
        var nodeLevel = [];
        var childCount = 0;
        var parent;
        for (var i = 0; i < numberOfParents; i++) {
            parent = RTreeRectangle.generateEmptyNode();
            childCount = Math.min(this.maxNodes, listOfRectangles.length);
            for (var y = 0; y < childCount; y++) {
                parent.insertChildRectangle(listOfRectangles.pop());
            }
            nodeLevel.push(parent);
        }
        if (numberOfParents > 1) {
            return this._recursiveTreeLayer(nodeLevel, level + 1);
        }
        else {
            return nodeLevel;
        }
    };
    RTree.prototype.batchInsert = function (listOfData) {
        var listOfRectangles = _.map(listOfData, function (dataPoint) {
            return new RTreeRectangle(dataPoint.x, dataPoint.y, dataPoint.width, dataPoint.height, dataPoint.data);
        });
        var maxCoordinate = -Infinity;
        var minCoordinate = Infinity;
        var coordX, coordY;
        _.each(listOfRectangles, function (rect) {
            coordX = Math.ceil(rect.x + rect.width * 0.5);
            coordY = Math.ceil(rect.y + rect.height * 0.5);
            maxCoordinate = Math.max(maxCoordinate, Math.max(coordX, coordY));
            minCoordinate = Math.min(minCoordinate, Math.min(coordX, coordY));
        });
        var sorted = _.sortBy(listOfRectangles, function (rect) {
            return HilbertCurves.toHilbertCoordinates(maxCoordinate - minCoordinate, Math.ceil(rect.x + rect.width * 0.5) - minCoordinate, Math.ceil(rect.y + rect.height * 0.5) - minCoordinate);
        });
        listOfRectangles.length = 0;
        this.root = this._recursiveTreeLayer(sorted)[0];
    };
    RTree.prototype.balanceTreePath = function (leafRectangle) {
        var currentNode = leafRectangle;
        while (!_.isUndefined(currentNode.parent) && currentNode.parent.numberOfChildren() > this.maxNodes) {
            var currentNode = currentNode.parent;
            if (currentNode != this.root) {
                currentNode.parent.removeChildRectangle(currentNode);
                _.forEach(currentNode.splitIntoSiblings(), function (insertRect) {
                    currentNode.parent.insertChildRectangle(insertRect);
                });
            }
            else if (currentNode == this.root) {
                _.forEach(currentNode.splitIntoSiblings(), function (insertRect) {
                    currentNode.insertChildRectangle(insertRect);
                });
            }
        }
    };
    return RTree;
}());
//# sourceMappingURL=data:application/json;base64,